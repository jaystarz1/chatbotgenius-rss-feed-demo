name: Update AI News Feed

on:
  schedule:
    - cron: '0 */3 * * *'  # Every 3 hours
  workflow_dispatch:         # Allow manual trigger

jobs:
  update-news:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Fetch and process RSS feeds
      run: |
        node - <<'EOF'
        const fs = require('fs');
        const https = require('https');

        // Jay's AI News Google Alert RSS Feeds (17 feeds)
        const rssFeeds = [
          'https://www.google.ca/alerts/feeds/04066946017456136967/4823471870123205',
          'https://www.google.ca/alerts/feeds/04066946017456136967/4217792680075237154',
          'https://www.google.ca/alerts/feeds/04066946017456136967/13089354697454058042',
          'https://www.google.ca/alerts/feeds/04066946017456136967/13089354697454058988',
          'https://www.google.ca/alerts/feeds/04066946017456136967/1942817214412033827',
          'https://www.google.ca/alerts/feeds/04066946017456136967/8120264801281996652',
          'https://www.google.ca/alerts/feeds/04066946017456136967/11062023876626914074',
          'https://www.google.ca/alerts/feeds/04066946017456136967/2711366426680219224',
          'https://www.google.ca/alerts/feeds/04066946017456136967/3311723711538288468',
          'https://www.google.ca/alerts/feeds/04066946017456136967/759091706708141296',
          'https://www.google.ca/alerts/feeds/04066946017456136967/5779438660767372325',
          'https://www.google.ca/alerts/feeds/04066946017456136967/12857769517673299701',
          'https://www.google.ca/alerts/feeds/04066946017456136967/8173930679921090367',
          'https://www.google.ca/alerts/feeds/04066946017456136967/10149064895149665631',
          'https://www.google.ca/alerts/feeds/04066946017456136967/10667153709229080869',
          'https://www.google.ca/alerts/feeds/04066946017456136967/11084050275073569809',
          'https://www.google.ca/alerts/feeds/04066946017456136967/3381636154839232159'
        ];

        // AI News Category Keywords
        const categoryKeywords = {
          'Business': ['ROI', 'revenue', 'profit', 'enterprise', 'CEO', 'startup', 'investment', 'market', 'business', 'company', 'corporate', 'executive', 'IPO', 'acquisition', 'merger'],
          'HR': ['hiring', 'recruitment', 'employee', 'workplace', 'talent', 'workforce', 'HR', 'human resources', 'staff', 'personnel', 'culture', 'remote work', 'hybrid'],
          'Jobs': ['job', 'career', 'employment', 'position', 'opening', 'vacancy', 'hire', 'recruiting', 'candidate', 'interview', 'salary', 'benefits'],
          'Tech': ['API', 'coding', 'software', 'hardware', 'cloud', 'developer', 'programming', 'tech', 'technology', 'platform', 'infrastructure'],
          'Microsoft': ['Microsoft', 'Azure', 'Windows', 'Office', 'Teams', 'Copilot', 'Bing', 'Surface', 'Xbox', 'Satya Nadella'],
          'Meta': ['Meta', 'Facebook', 'Instagram', 'WhatsApp', 'Oculus', 'Reality Labs', 'Zuckerberg', 'Threads', 'Metaverse'],
          'OpenAI': ['OpenAI', 'ChatGPT', 'GPT-4', 'GPT-5', 'Sam Altman', 'DALL-E', 'Codex', 'Whisper', 'Sora'],
          'NVIDIA': ['NVIDIA', 'GeForce', 'CUDA', 'Jensen Huang', 'RTX', 'GPU', 'graphics card', 'tensor cores', 'AI chip'],
          'YCombinator': ['Y Combinator', 'YC', 'startup accelerator', 'Paul Graham', 'Demo Day', 'batch', 'incubator', 'Hacker News'],
          'ML': ['machine learning', 'neural', 'deep learning', 'LLM', 'transformer', 'dataset', 'algorithm', 'model', 'training'],
          'Ethics': ['bias', 'ethical', 'ethics', 'fairness', 'transparency', 'accountability', 'responsible AI', 'AI ethics'],
          'Privacy': ['privacy', 'data protection', 'GDPR', 'personal data', 'surveillance', 'encryption', 'data breach', 'confidential'],
          'Security': ['security', 'cybersecurity', 'vulnerability', 'hack', 'breach', 'malware', 'phishing', 'threat', 'exploit'],
          'Policy': ['policy', 'regulation', 'governance', 'legislation', 'government', 'regulatory', 'compliance', 'framework'],
          'Legal': ['legal', 'lawsuit', 'court', 'lawyer', 'attorney', 'litigation', 'law', 'copyright', 'patent'],
          'Healthcare': ['medical', 'patient', 'diagnosis', 'healthcare', 'clinical', 'doctor', 'hospital', 'health', 'medicine'],
          'Education': ['student', 'learning', 'education', 'training', 'course', 'university', 'school', 'teacher'],
          'Stocks': ['stock', 'shares', 'trading', 'investment', 'market cap', 'IPO', 'nasdaq', 'NYSE', 'portfolio']
        };

        function fetchRSS(url) {
          return new Promise((resolve, reject) => {
            https.get(url, (res) => {
              let data = '';
              res.on('data', (chunk) => data += chunk);
              res.on('end', () => resolve(data));
            }).on('error', reject);
          });
        }

        function categorizeArticle(title, excerpt) {
          const text = (title + ' ' + excerpt).toLowerCase();
          let bestCategory = 'General';
          let highestScore = 0;

          const companyCategories = ['Microsoft', 'Meta', 'OpenAI', 'NVIDIA', 'YCombinator'];
          for (const category of companyCategories) {
            const keywords = categoryKeywords[category];
            for (const keyword of keywords) {
              if (text.includes(keyword.toLowerCase())) {
                return category;
              }
            }
          }

          for (const [category, keywords] of Object.entries(categoryKeywords)) {
            if (companyCategories.includes(category)) continue;
            let score = 0;
            for (const keyword of keywords) {
              if (text.includes(keyword.toLowerCase())) score++;
            }
            if (score > highestScore) {
              highestScore = score;
              bestCategory = category;
            }
          }
          return bestCategory;
        }

        async function updateNews() {
          const allNewsItems = [];

          for (const feedUrl of rssFeeds) {
            try {
              const feedData = await fetchRSS(feedUrl);
              const entries = feedData.match(/<entry>[\s\S]*?<\/entry>/g) || [];

              entries.forEach(entry => {
                const title = (entry.match(/<title[^>]*>(.*?)<\/title>/s) || ['',''])[1]
                  .replace(/&amp;/g, '&')
                  .replace(/&lt;/g, '<')
                  .replace(/&gt;/g, '>')
                  .replace(/&quot;/g, '"')
                  .replace(/&#39;/g, "'");

                const link = (entry.match(/<link[^>]*href="([^"]*)"/) || ['',''])[1];
                const content = (entry.match(/<content[^>]*>(.*?)<\/content>/s) || ['',''])[1];
                const published = (entry.match(/<published>(.*?)<\/published>/) || ['', new Date().toISOString()])[1];

                const cleanContent = content
                  .replace(/<[^>]*>/g, '')
                  .replace(/&lt;/g, '<')
                  .replace(/&gt;/g, '>')
                  .replace(/&amp;/g, '&')
                  .replace(/&quot;/g, '"')
                  .replace(/&#39;/g, "'")
                  .trim();

                const excerpt = cleanContent.substring(0, 200) + (cleanContent.length > 200 ? '...' : '');
                const sourceMatch = content.match(/- ([^<]+)$/);
                const source = sourceMatch ? sourceMatch[1].trim() : 'AI News';
                const category = categorizeArticle(title, excerpt);

                allNewsItems.push({
                  title,
                  link,
                  excerpt,
                  source,
                  category,
                  published: new Date(published).toISOString(),
                  dateString: new Date(published).toLocaleDateString('en-US', {
                    month: 'short',
                    day: 'numeric',
                    year: 'numeric'
                  })
                });
              });
            } catch (err) {
              console.error('Error fetching feed:', feedUrl, err.message);
            }
          }

          const uniqueItems = Array.from(
            new Map(allNewsItems.map(item => [item.title, item])).values()
          );
          uniqueItems.sort((a, b) => new Date(b.published) - new Date(a.published));

          const output = {
            articles: uniqueItems.slice(0, 100),
            lastUpdated: new Date().toISOString(),
            totalFeeds: rssFeeds.length,
            success: true
          };

          fs.mkdirSync('data', { recursive: true });
          fs.writeFileSync('data/news.json', JSON.stringify(output, null, 2));
          console.log(`âœ“ Updated ${output.articles.length} articles from ${rssFeeds.length} feeds`);
        }

        updateNews();
        EOF

    - name: Commit and push changes
      run: |
        git config --global user.name 'GitHub Actions Bot'
        git config --global user.email 'actions@github.com'
        git add data/news.json
        git diff --staged --quiet || (git commit -m "Update AI news: $(date)" && git push)
